function [bone, cavity, neither, distances] = fraction3d(dstMap, x3RegionOfInterest, boneMask, cavityMask, neitherMask, maxDistance, nRadiiRegionPoints, radiiRegion)

    sumf = @(x) sum(x(:));  % sum flattened array

    % "x-axis" in fraction-distance plot. Ignore nRadiiRegionPoints if interpoint distance is below 1.
    if (radiiRegion(2) - radiiRegion(1)) < (nRadiiRegionPoints+1)
        distances = (radiiRegion(1), radiiRegion(2), 1 + floor((radiiRegion(2) - radiiRegion(1))/nRadiiRegionPoints));
    else
        distances = linspace(radiiRegion(1), radiiRegion(2), 1 + nRadiiRegionPoints);
    end
    dstMask = (dstMap >= radiiRegion(1)) & (dstMap < radiiRegion(2)) & x3RegionOfInterest;

    % Preallocate using nans. A bit more work needs to be done, but it's easier to spot errors in the debugger.
    % Function output is cleaned of nans, see function at the end of this file.
    total   = nan(1, length(distances));
    bone    = nan(1, length(distances));
    cavity  = nan(1, length(distances));
    neither = nan(1, length(distances));

    % Fill fraction arrays
    % Ignore the first point, since it's equal to radiiRegions(1), since the range radiiRegion(1):radiiRegions(1) would be empty
    for ii = 2:length(distances)
        d = distances(ii);  % outermost point to include
        itrDstMask  = dstMask & (dstMap <= d);  % limit the mask radius in current iteration
        if sumf(itrDstMask) == 0
            warning('No elements in itrDstMask!')
        end
        bone(ii)    = sumf(boneMask(itrDstMask));
        cavity(ii)  = sumf(cavityMask(itrDstMask));
        neither(ii) = sumf(neitherMask(itrDstMask));
        total(ii)   = sumf(itrDstMask);
    end
    % Clean up nans using function below (replaceFractionNans)
    bone = replaceFractionNans(bone);
    bone = bone./total;
    cavity = replaceFractionNans(cavity);
    cavity = cavity./total;
    neither = replaceFractionNans(neither);
    neither = neither./total;

    % Print entire bone, cavity and neither if it's the length < 30, else print
    % roughly evenly spaced sample form the vector.
    if length(bone) > 30
        printIdx = round(linspace(1, length(bone), 30));
        fprintf('INFO::\t\tbone (sample):     %s\n', mat2str(bone(printIdx), 6));
        fprintf('INFO::\t\tcavity (sample):   %s\n', mat2str(cavity(printIdx), 6));
        fprintf('INFO::\t\tneither (sample):  %s\n', mat2str(neither(printIdx), 6));
    else
        fprintf('INFO::\t\tbone:              %s\n', mat2str(bone, 6));
        fprintf('INFO::\t\tcavity:            %s\n', mat2str(cavity, 6));
        fprintf('INFO::\t\tneither:           %s\n', mat2str(neither, 6));
    end
end


%% replaceFractionNans: Replaces Nans fractions generated by fraction3d
% If first element is a nan, it's replaced with 0
% All other points are replaced by the previous points value
function [frac] = replaceFractionNans(frac)
    if any(isnan(frac))
        warning('NaNs in fraction!')
    end
    if isnan(frac(1))
        frac(1) = 0;
    end
    for ii = 2:length(frac)
        if isnan(frac(ii))
            frac(ii) = frac(ii-1);
        end
    end
end
